{"timestamp": 1681098604.518212, "stored_source_code": "# declare a list tasks whose products you want to use as inputs\nupstream = None\nimport pandas as pd\nimport duckdb\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\ndef num_customers_category(con, query_str, colums):\n\n    \"\"\"\n    \n    This function performs a query: Number of customers by job category then plots the result and saves the plot as a PNG file.\n    \n    Args:\n        con (duckdb.Connection): DuckDB connection\n        query_str (str): SQL query string\n        colums (list): List of column names\n        \n    Returns:\n        df_jobs (pandas.DataFrame): DataFrame containing the result of the query\n\n    \"\"\"\n\n    # Execute the query\n    df_jobs = con.execute(query_str).fetchall()\n    df_jobs = pd.DataFrame(df_jobs, columns=colums)\n\n    return df_jobs\ndef plot_bar_query(df_jobs, x, y, title, filename, hue=None):\n\n    \"\"\"\n\n    This function plots the result of a query and saves the plot as a PNG file.\n\n    Args:\n        df_jobs (pandas.DataFrame): DataFrame containing the result of the query\n        x (str): Name of the column to be used as x-axis\n        y (str): Name of the column to be used as y-axis\n        title (str): Title of the plot\n        filename (str): Name of the file to be saved\n\n    \"\"\"\n\n    plt.figure(figsize=(10, 5))\n    ax = sns.barplot(x=x, y=y, data=df_jobs, hue=hue)\n    ax.bar_label(ax.containers[0])\n    plt.title(title)\n    \n    # Save the plot\n    plt.savefig(os.path.abspath(os.path.join(os.getcwd(), 'reports', 'figures', filename)))\nif __name__==\"__main__\":\n\n    # Set the path to the CSV file\n    csv_path = os.path.abspath(os.path.join(os.getcwd(), 'data', 'raw', 'term-deposit-marketing-2020.csv'))\n\n    # Read the CSV file using pandas\n    data = pd.read_csv(csv_path)\n\n    # Create an in-memory DuckDB connection\n    con = duckdb.connect(database=':memory:', read_only=False)\n\n    # Register the pandas DataFrame as a DuckDB table\n    con.register('term_deposit_marketing', data)\n\n    # Q1 Find the total number of customers in each job category\n    # Execute the query\n    q_jobs = \"\"\"\n        SELECT job, COUNT(*) as num_customers\n        FROM term_deposit_marketing\n        GROUP BY job\n        ORDER BY num_customers DESC;\n        \"\"\"\n    \n    # Execute the query\n    df_jobs = num_customers_category(con, q_jobs, ['job', 'num_customers'])\n\n    # Plot the result\n    plot_bar_query(df_jobs,  'num_customers', 'job','Number of customers by job category', 'num_customers_job.png')\n\n    # Q2 Find the total number of customers in each marital status\n    # Form the query\n    q_marital = \"\"\"\n        SELECT marital, COUNT(*) as num_customers\n        FROM term_deposit_marketing\n        GROUP BY marital\n        ORDER BY num_customers DESC;\n        \"\"\"\n    \n    # Execute the query\n    df_marital = num_customers_category(con, q_marital, ['marital', 'num_customers'])\n\n    # Plot the result\n    plot_bar_query(df_marital,  'num_customers', 'marital','Number of customers by marital status', 'num_customers_marital.png')\n\n    # Q3 Find the total number of customers in each education level\n    # Form the query\n    q_education = \"\"\"\n        SELECT education, COUNT(*) as num_customers\n        FROM term_deposit_marketing\n        GROUP BY education\n        ORDER BY num_customers DESC;\n        \"\"\"\n    \n    # Execute the query\n    df_education = num_customers_category(con, q_education, ['education', 'num_customers'])\n\n    # Plot the result\n    plot_bar_query(df_education,  'num_customers', 'education','Number of customers by education level', 'num_customers_education.png')\n\n    # Q4 Find the total number of customers in each housing loan status\n    # Form the query\n    q_housing = \"\"\"\n        SELECT housing, COUNT(*) as num_customers\n        FROM term_deposit_marketing\n        GROUP BY housing\n        ORDER BY num_customers DESC;\n        \"\"\"\n    \n    # Execute the query\n    df_housing = num_customers_category(con, q_housing, ['housing', 'num_customers'])\n\n    # Plot the result\n    plot_bar_query(df_housing,  'num_customers', 'housing','Number of customers by housing loan status', 'num_customers_housing.png')\n\n    # Q5 Find the number of customers who subscribed to a term deposit (y = 'yes') by job category:\n    # Form the query\n    q_subscribed = \"\"\"\n        SELECT job, COUNT(*) as num_subscribers\n        FROM term_deposit_marketing\n        WHERE y = 'yes'\n        GROUP BY job\n        ORDER BY num_subscribers DESC;\n        \"\"\"\n    \n    # Execute the query\n    df_subscribed = num_customers_category(con, q_subscribed, ['num_subscribers', 'job'])\n\n    # Plot the result\n    plot_bar_query(df_subscribed, 'job','num_subscribers', 'Number of customers who subscribed to a term deposit by job category', 'num_subscribers_job.png')\n\n    # Q6 Find the number of customers who subscribed to a term deposit (y = 'yes') by marital status:\n    # Form the query\n    q_subscribedm = \"\"\"\n        SELECT marital, COUNT(*) as num_subscribers\n        FROM term_deposit_marketing\n        WHERE y = 'yes'\n        GROUP BY marital\n        ORDER BY num_subscribers DESC;\n        \"\"\"\n    \n    # Execute the query\n    df_subscribedm = num_customers_category(con, q_subscribedm, ['num_subscribers', 'marital'])\n\n    # Plot the result\n    plot_bar_query(df_subscribedm, 'marital','num_subscribers', 'Number of customers who subscribed to a term deposit by marital status', 'num_subscribers_marital.png')\n\n    # Q7 Find the number of customers who subscribed to a term deposit (y = 'yes') by education level:\n    # Form the query\n    q_subscribede = \"\"\"\n        SELECT education, COUNT(*) as num_subscribers\n        FROM term_deposit_marketing\n        WHERE y = 'yes'\n        GROUP BY education\n        ORDER BY num_subscribers DESC;\n        \"\"\"\n    \n    # Execute the query\n    df_subscribede = num_customers_category(con, q_subscribede, ['num_subscribers', 'education'])\n\n    # Plot the result\n    plot_bar_query(df_subscribede, 'education','num_subscribers', 'Number of customers who subscribed to a term deposit by education level', 'num_subscribers_education.png')\n\n    # Q8 Find the number of customers who subscribed to a term deposit (y = 'yes') by housing loan status:\n    # Form the query\n    q_subscribedh = \"\"\"\n        SELECT housing, COUNT(*) as num_subscribers\n        FROM term_deposit_marketing\n        WHERE y = 'yes'\n        GROUP BY housing\n        ORDER BY num_subscribers DESC;\n        \"\"\"\n    \n    # Execute the query\n    df_subscribedh = num_customers_category(con, q_subscribedh, ['num_subscribers', 'housing'])\n\n    # Plot the result\n    plot_bar_query(df_subscribedh, 'housing','num_subscribers', 'Number of customers who subscribed to a term deposit by housing loan status', 'num_subscribers_housing.png')\n\n    # Q9 Find the number of customers who subscribed to a term deposit (y = 'yes') by age bracket and marital status:\n    age_bracket_q = \"\"\"\n                SELECT \n                    CASE\n                        WHEN age BETWEEN 0 AND 19 THEN '0-19'\n                        WHEN age BETWEEN 20 AND 29 THEN '20-29'\n                        WHEN age BETWEEN 30 AND 39 THEN '30-39'\n                        WHEN age BETWEEN 40 AND 49 THEN '40-49'\n                        WHEN age BETWEEN 50 AND 59 THEN '50-59'\n                        ELSE '60+'\n                    END as age_bracket,\n                    marital,\n                    COUNT(*) as num_customers\n                FROM term_deposit_marketing\n                WHERE y = 'yes'\n                GROUP BY age_bracket, marital\n                ORDER BY age_bracket, marital;\n                \"\"\"\n    \n    # Execute the query\n    df_age_bracket = num_customers_category(con, age_bracket_q, ['age_bracket', 'marital', 'num_customers'])\n\n    # Plot the result\n    plot_bar_query(df_age_bracket,  'num_customers', 'marital','Number of customers who subscribed by marital status', 'num_customers_m_bracket.png', hue='age_bracket')\n\n    # Close the connection\n    con.close()", "params": {}}